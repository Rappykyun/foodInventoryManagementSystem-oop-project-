
import com.formdev.flatlaf.FlatLaf;
import  javax.swing.*;
import java.sql.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import com.toedter.calendar.JDateChooser;
import com.toedter.calendar.JCalendar;
import java.awt.Color;
import java.io.File;
import javax.swing.table.DefaultTableModel;
import java.util.Vector;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;
import java.io.*;
import java.io.FileFilter;
import java.text.ParseException;
import java.text.SimpleDateFormat;



/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author Lenovo Pc
 */
public class foodCRUD extends javax.swing.JFrame {

    /**
     * Creates new form foodCRUD
     */
    private JDateChooser dateChooser;
    public foodCRUD() {
        initComponents();
        con=Connect.getConnection();
        date();
        Fetch();
        qty();

        

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    Connection con;
    PreparedStatement pst;
    ResultSet rs;
 private void logAction(String action, java.util.Date time, String foodName) {
    try {
        // Insert a log record into your logs table
        String description;

        switch (action) {
            case "Add":
                description = "Added new record: " + foodName;
                break;
            case "Update":
                description = "Updated record: " + foodName;
                break;
            case "Delete":
                description = "Deleted record: " + foodName;
                break;
            case "Export":
                description = "Exported records to CSV";
                break;
            default:
                description = "Unknown action";
        }

        pst = con.prepareStatement("INSERT INTO logs (action, timestamp,description) VALUES (?, ?,?)");
        pst.setString(1, action);
        pst.setTimestamp(2, new java.sql.Timestamp(time.getTime())); // Assuming your logs table has a 'timestamp' column
        pst.setString(3, description);
        pst.executeUpdate();
    } catch (SQLException ex) {
        Logger.getLogger(foodCRUD.class.getName()).log(Level.SEVERE, null, ex);
    }
}

    public void date(){
        dateChooser = new JDateChooser();
        dateChooser.setDateFormatString("yyyy-MM-dd"); 
        dateChooser.setDate(null); // Initialize without a selected date
        dateChooser.setBounds(10, 110, 120, 25); // Adjust the position
        dateChooser.setForeground(new java.awt.Color(192, 192, 192));
        jPanel1.add(dateChooser);
        playButtonClickSound();
    }
    public void qty(){
        txtQty = new javax.swing.JSpinner();
        txtQty.setModel(new SpinnerNumberModel(0, 0, Integer.MAX_VALUE, 1)); // Setting the model to allow only non-negative integer values
        txtQty.setBounds(149, 110, 140, 25); // Adjust the position
        jPanel1.add(txtQty);
    }
    private void playButtonClickSound() {
    try {
        AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("audio/Click Sound Effect.wav"));
        Clip clip = AudioSystem.getClip();
        clip.open(audioInputStream);
        clip.start();
    } catch (Exception ex) {
        ex.printStackTrace();
    }
}
    private void playModalSuccess() {
    try {
        AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("audio/Apple Pay Success Sound Effect.wav"));
        Clip clip = AudioSystem.getClip();
        clip.open(audioInputStream);
        clip.start();
    } catch (Exception ex) {
        ex.printStackTrace();
    }
}
    private java.util.Date parseDate(String dateStr) {
    try {
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        return dateFormat.parse(dateStr);
    } catch (ParseException ex) {
        // Handle the parsing exception
        ex.printStackTrace();
        return null;
    }
}

private void playRowClickSound() {
    try {
        AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("audio/mouseclick.wav"));
        Clip clip = AudioSystem.getClip();
        clip.open(audioInputStream);
        clip.start();
    } catch (Exception ex) {
        ex.printStackTrace();
    }
}
private void selectType(String typeName) {
    type.setSelectedItem(typeName);
}
    private void Fetch(){
       try {
        int q;
        pst = con.prepareStatement("SELECT * FROM food_tbl");
        rs = pst.executeQuery();
        ResultSetMetaData rss = rs.getMetaData();
        q = rss.getColumnCount();
        DefaultTableModel df = (DefaultTableModel) table.getModel();
        df.setRowCount(0);

        while (rs.next()) {
            Vector v2 = new Vector();
            for (int a = 1; a <= q; a++) {
                v2.add(rs.getString(a));
            }
            df.addRow(v2);
        }
    } catch (SQLException ex) {
        Logger.getLogger(foodCRUD.class.getName()).log(Level.SEVERE, null, ex);
    }

        
    }
    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        flatDarkLaf1 = new com.formdev.flatlaf.FlatDarkLaf();
        jScrollBar1 = new javax.swing.JScrollBar();
        jPanel2 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        addButton = new javax.swing.JButton();
        upButton = new javax.swing.JButton();
        txtFname = new javax.swing.JTextField();
        delButton = new javax.swing.JButton();
        btnExport = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        type = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        searchButton = new javax.swing.JButton();
        txtsearch = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));

        jPanel2.setForeground(new java.awt.Color(51, 51, 51));

        jLabel5.setBackground(new java.awt.Color(255, 255, 255));
        jLabel5.setFont(new java.awt.Font("Arial", 1, 36)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("FOOD MANAGEMENT");

        jPanel1.setBorder(new com.formdev.flatlaf.ui.FlatRoundBorder());
        jPanel1.setForeground(new java.awt.Color(51, 51, 51));

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel1.setText("FOOD NAME");

        jLabel2.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel2.setText("EXPIRATION DATE");

        jLabel3.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel3.setText("QUANTITY");

        addButton.setBackground(new java.awt.Color(100, 204, 197));
        addButton.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        addButton.setForeground(new java.awt.Color(218, 255, 251));
        addButton.setText("ADD");
        addButton.setBorder(new com.formdev.flatlaf.ui.FlatRoundBorder());
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        upButton.setBackground(new java.awt.Color(100, 204, 197));
        upButton.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        upButton.setForeground(new java.awt.Color(218, 255, 251));
        upButton.setText("UPDATE");
        upButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                upButtonActionPerformed(evt);
            }
        });

        txtFname.setBackground(new java.awt.Color(255, 255, 255));
        txtFname.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        txtFname.setForeground(new java.awt.Color(0, 0, 0));

        delButton.setBackground(new java.awt.Color(100, 204, 197));
        delButton.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        delButton.setForeground(new java.awt.Color(218, 255, 251));
        delButton.setText("DELETE");
        delButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delButtonActionPerformed(evt);
            }
        });

        btnExport.setBackground(new java.awt.Color(100, 204, 197));
        btnExport.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        btnExport.setForeground(new java.awt.Color(218, 255, 251));
        btnExport.setText("EXPORT(CSV)");
        btnExport.setBorder(new com.formdev.flatlaf.ui.FlatButtonBorder());
        btnExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel6.setText("TYPE");

        type.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        type.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Meat", "Vegetables", "Fruits", "Grains", "Dairy", "Legumes", "Pasta", "Eggs", "Sweets", "Beverages", "Condiments", "Fast Food", "International Cuisine" }));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(txtFname, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(1, 1, 1)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addGap(168, 168, 168))
                                    .addComponent(addButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(delButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(upButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnExport, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(99, 99, 99)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(type, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)))))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtFname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(46, 46, 46)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(type, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(addButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(delButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(upButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnExport)
                .addContainerGap(28, Short.MAX_VALUE))
        );

        table.setBackground(new java.awt.Color(255, 255, 255));
        table.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        table.setForeground(new java.awt.Color(0, 0, 0));
        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "FOOD NAME", "QUANTITY", "EXPDATE", "TYPE", "ID"
            }
        ));
        table.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        table.setGridColor(new java.awt.Color(0, 0, 0));
        table.setSelectionBackground(new java.awt.Color(204, 255, 255));
        table.setShowGrid(true);
        table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(table);

        searchButton.setBackground(new java.awt.Color(100, 204, 197));
        searchButton.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        searchButton.setForeground(new java.awt.Color(218, 255, 251));
        searchButton.setText("SEARCH");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(108, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 49, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(txtsearch, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(searchButton))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 544, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(98, 98, 98)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 491, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchButton)
                    .addComponent(txtsearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(111, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addGap(60, 60, 60))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(14, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
       try {
           playButtonClickSound();
    // TODO add your handling code here:
          // TODO add your handling code here:
        String searchKeyword = txtsearch.getText(); // Get the user input

        // Search for records based on food name (fname) and category (type)
        pst = con.prepareStatement("SELECT * FROM food_tbl WHERE fname LIKE ? OR type LIKE ?");
        pst.setString(1, "%" + searchKeyword + "%"); // Search for partial matches
        pst.setString(2, "%" + searchKeyword + "%");
        rs = pst.executeQuery();

        // Assuming you have an existing JTable named 'table'
        DefaultTableModel tableModel = (DefaultTableModel) table.getModel();
        tableModel.setRowCount(0); // Clear existing rows

        while (rs.next()) {
            String fname = rs.getString("fname");
            int quantity = rs.getInt("quantity");
             java.util.Date expDate = rs.getDate("expDate");
            String type = rs.getString("type");
             int id = rs.getInt("id");

            // Add a row to the existing table model
            tableModel.addRow(new Object[]{fname, quantity, expDate, type,id});
        }
    } catch (SQLException ex) {
        Logger.getLogger(foodCRUD.class.getName()).log(Level.SEVERE, null, ex);
    }

    }//GEN-LAST:event_searchButtonActionPerformed

    private void tableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMouseClicked
        // TODO add your handling code here:
        playButtonClickSound();
      try {
        // Get the selected row index
        int selectedRow = table.getSelectedRow();

        // Check if a row is selected
        if (selectedRow != -1) {
            // Assuming the columns in the JTable match the order of columns in your SQL query
            String fname = table.getValueAt(selectedRow, 0).toString();
            String quantityStr = table.getValueAt(selectedRow, 1).toString();
            int quantity = Integer.parseInt(quantityStr);
            java.util.Date expDate = parseDate(table.getValueAt(selectedRow, 2).toString());
            String type = table.getValueAt(selectedRow, 3).toString();

            // Set the values to your UI components
            txtFname.setText(fname);
            txtQty.setValue(quantity);
            dateChooser.setDate(expDate);
            selectType(type); // Call the method to set the selected item in the JComboBox
        }
    } catch (Exception ex) {
        Logger.getLogger(foodCRUD.class.getName()).log(Level.SEVERE, null, ex);
    }
    }//GEN-LAST:event_tableMouseClicked

    private void btnExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportActionPerformed
       FileWriter fw = null;
try {
    // TODO add your handling code here:
    String fileName = "C:\\shelfmate(CSV)\\shelfMate.csv";
    fw = new FileWriter(fileName);
    playButtonClickSound();

    pst = con.prepareStatement("SELECT * FROM food_tbl");
    rs = pst.executeQuery();

    // Write the CSV header
    fw.append("Food Name");
    fw.append(',');
    fw.append("Quantity");
    fw.append(',');
    fw.append("ExpDate");
    fw.append(',');
    fw.append("Type");
    fw.append('\n');
    SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");

    while (rs.next()) {
        fw.append(rs.getString(1)); 
        fw.append(',');
        fw.append(rs.getString(2)); 

        Date expDate = rs.getDate(3); 
        String formattedExpDate = "";

        // Check for zero date
        if (expDate != null && !expDate.equals("0000-00-00")) {
            formattedExpDate = dateFormat.format(expDate);
        }

        fw.append(',');
        fw.append(formattedExpDate); 
        fw.append(',');

        fw.append(rs.getString(4)); 
        fw.append('\n');
    }
    playModalSuccess();
    JOptionPane.showMessageDialog(this, "CSV exported successfully!!");
    fw.flush();
    logAction("Export", new java.sql.Timestamp(System.currentTimeMillis()), "CSV Export");
} catch (IOException | SQLException ex) {
    Logger.getLogger(foodCRUD.class.getName()).log(Level.SEVERE, null, ex);
} finally {
    try {
        if (fw != null) {
            fw.close();
        }
    } catch (IOException ex) {
        Logger.getLogger(foodCRUD.class.getName()).log(Level.SEVERE, null, ex);
    }
}



    }//GEN-LAST:event_btnExportActionPerformed

    private void delButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delButtonActionPerformed
       try {
        playButtonClickSound();
        // TODO add your handling code here:

        int selectedRow = table.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a row to delete.");
            return;
        }
         String pname = table.getValueAt(selectedRow, 0).toString();
        // Extract the food ID from the selected row (assuming it's in the last column)
        String foodID = table.getValueAt(selectedRow, table.getColumnCount() - 1).toString();

        // Execute an SQL DELETE query to remove the record from the database
        pst = con.prepareStatement("DELETE FROM food_tbl WHERE id=?");
        pst.setString(1, foodID);
        int rowsDeleted = pst.executeUpdate();
        logAction("Delete", new java.sql.Timestamp(System.currentTimeMillis()), pname);
        if (rowsDeleted == 1) {
            playModalSuccess();
            JOptionPane.showMessageDialog(this, "Record has been successfully deleted!");

            txtFname.setText("");
            dateChooser.setDate(null);
            txtQty.setValue(0);
            type.setSelectedItem(null);
            txtFname.requestFocus();
            Fetch(); // Refresh the table display (optional)
        } else {
            JOptionPane.showMessageDialog(this, "Failed to delete the record.");
        }
    } catch (SQLException ex) {
        Logger.getLogger(foodCRUD.class.getName()).log(Level.SEVERE, null, ex);
    }
    }//GEN-LAST:event_delButtonActionPerformed

    private void upButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_upButtonActionPerformed
       try {
        playButtonClickSound();
        // TODO add your handling code here:

        int selectedRow = table.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a row to update.");
            return;
        }

        // Extract data from the selected row
        String newFoodName = txtFname.getText();
        java.util.Date selectedDate = dateChooser.getDate();
        int quantity = (int) txtQty.getValue();
        String formattedDate = "";

        if (selectedDate != null) {
            formattedDate = new java.sql.Date(selectedDate.getTime()).toString();
        }
        String selectedType = (String) type.getSelectedItem();

        // Extract the food ID from the selected row (assuming it's in the last column)
        String foodID = table.getValueAt(selectedRow, table.getColumnCount() - 1).toString();

        // Update the record based on the "ID"
        pst = con.prepareStatement("UPDATE food_tbl SET fname=?, expDate=?, quantity=?, type=? WHERE id=?");
        pst.setString(1, newFoodName);
        pst.setString(2, formattedDate);
        pst.setInt(3, quantity);
        pst.setString(4, selectedType);
        pst.setString(5, foodID);

        int rowsUpdated = pst.executeUpdate();

        if (rowsUpdated == 1) {
            playModalSuccess();
            JOptionPane.showMessageDialog(this, "Record has been successfully updated!");
            // Clear the form fields
            txtFname.setText("");
            dateChooser.setDate(null);
            txtQty.setValue(0);
            type.setSelectedItem(null);
            // Fetch and refresh the table
            Fetch();

            // Log the action
            logAction("Update", new java.sql.Timestamp(System.currentTimeMillis()), newFoodName);
        } else {
            JOptionPane.showMessageDialog(this, "Failed to update the record.");
        }
    } catch (SQLException ex) {
        Logger.getLogger(foodCRUD.class.getName()).log(Level.SEVERE, null, ex);
    }
    }//GEN-LAST:event_upButtonActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        try {
            // TODO add your handling code here:
            String pname = txtFname.getText();
            java.util.Date selectedDate = dateChooser.getDate();
            int quantity = (int) txtQty.getValue();
            String formattedDate = "";

            if (selectedDate != null) {
                formattedDate = new java.sql.Date(selectedDate.getTime()).toString();
            }

            String selectedType = (String) type.getSelectedItem();
            playButtonClickSound();
           
             logAction("Add", new java.sql.Timestamp(System.currentTimeMillis()), pname);
            pst = con.prepareStatement("INSERT INTO food_tbl (fname, quantity, expDate, type) VALUES (?, ?, ?, ?)");
            pst.setString(1, pname);
            pst.setInt(2, quantity);
            pst.setString(3, formattedDate);
            pst.setString(4, selectedType);
            

            int k = pst.executeUpdate();
            if (k == 1) {
                playModalSuccess();
                JOptionPane.showMessageDialog(this, "Record added Successfully");

                txtFname.setText("");
                dateChooser.setDate(null); // Clear the selected date
                txtQty.setValue(0);
                type.setSelectedItem(null);
                Fetch();

            } else {
                JOptionPane.showMessageDialog(this, "Record failed to save!!");
            }
        } catch (SQLException ex) {
            Logger.getLogger(foodCRUD.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_addButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(foodCRUD.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(foodCRUD.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(foodCRUD.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(foodCRUD.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
    
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new foodCRUD().setVisible(true);
        });
    }

    private javax.swing.JSpinner txtQty;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JButton btnExport;
    private javax.swing.JButton delButton;
    private com.formdev.flatlaf.FlatDarkLaf flatDarkLaf1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollBar jScrollBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton searchButton;
    private javax.swing.JTable table;
    private javax.swing.JTextField txtFname;
    private javax.swing.JTextField txtsearch;
    private javax.swing.JComboBox<String> type;
    private javax.swing.JButton upButton;
    // End of variables declaration//GEN-END:variables
}
